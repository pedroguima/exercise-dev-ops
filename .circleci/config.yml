version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.8
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set env variables
          command: echo 'export VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run: 
          name: Install dependencies
          command: sudo apt-get install liblmdb-dev 
      - run: 
          name: Build binaries
          command: ci/build.sh backend && ci/build.sh server && ci/build.sh client
      - run:  
          name: Build backend image
          command: docker build -t $DOCKER_REPO/$DOCKER_USER/tcbackend:$VERSION --build-arg version=$VERSION ./ci/docker/backend && docker tag $DOCKER_REPO/$DOCKER_USER/tcbackend:$VERSION $DOCKER_REPO/$DOCKER_USER/tcbackend:latest
      - run:
          name: Build server image
          command: docker build -t $DOCKER_REPO/$DOCKER_USER/tcserver:$VERSION --build-arg version=$VERSION ./ci/docker/server && docker tag $DOCKER_REPO/$DOCKER_USER/tcserver:$VERSION $DOCKER_REPO/$DOCKER_USER/tcserver:latest
      - run:
          name: Build client image
          command: docker build -t $DOCKER_REPO/$DOCKER_USER/tcclient:$VERSION --build-arg version=$VERSION ./ci/docker/client && docker tag $DOCKER_REPO/$DOCKER_USER/tcclient:$VERSION $DOCKER_REPO/$DOCKER_USER/tcclient:latest
      - run:
          name: Docker login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_REPO
      - run:
          name: Docker push backend image
          command: docker push $DOCKER_REPO/$DOCKER_USER/tcbackend
      - run:
          name: Docker push server image
          command: docker push $DOCKER_REPO/$DOCKER_USER/tcserver
      - run:
          name: Docker push client image
          command: docker push $DOCKER_REPO/$DOCKER_USER/tcclient

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set env variables
          command: echo 'export VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run:
          name: Decode Google Cloud Credentials
          command: "echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json"
      - run:
          name: Set GCloud defaults
          command: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json && gcloud --quiet config set project ${GOOGLE_PROJECT_ID} && gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE} && gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - run:
          name: Deploy backend
          command: kubectl set image deployment/$GOOGLE_DEPLOYMENT_NAME tcbackend=$DOCKER_REPO/$DOCKER_USER/tcbackend:$VERSION --record
      - run:
          name: Deploy server
          command: kubectl set image deployment/$GOOGLE_DEPLOYMENT_NAME tcserver=$DOCKER_REPO/$DOCKER_USER/tcserver:$VERSION --record 
      - run:
          name: Deploy client 
          command: kubectl set image deployment/$GOOGLE_DEPLOYMENT_NAME tcclient=$DOCKER_REPO/$DOCKER_USER/tcclient:$VERSION --record 

      
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: develop 
